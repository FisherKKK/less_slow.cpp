/**
 *  less_slow_sm90a.ptx
 *
 *  Micro-kernels for building a performance-first mindset for CUDA-capable
 *  GPUs using Parallel Thread eXecution (PTX) Intermediate Representation (IR) 
 *  for for Hopper-generation Nvidia GPUs and newer.
 * 
 *  ? You should start at `less_slow.cu` before reading this file.
 *  ? You should start at `less_slow_sm70.ptx` before reading this file.
 *  ? Also read intro to PTX: https://docs.nvidia.com/cuda/parallel-thread-execution/
 *  ? Check the PTX ISA: https://docs.nvidia.com/cuda/pdf/ptx_isa_8.5.pdf
 *
 *  You can validate this file by asking the Nvidia PTX Assembler to compile it
 *  to `.cubin` for some target architecture:
 * 
 *  $ ptxas -o less_slow_from_ptx.cubin -arch=sm_90a less_slow_sm90a.ptx
 *  $ cuobjdump -sass less_slow_from_ptx.cubin | grep -i mma
 */
.version 8.0             // PTX version 8.0 for Hopper GPUs
.target sm_90a           // Target architecture (SM_90a - Hopper GPUs)
.address_size 64         // 64-bit addressing

/**
 *  Our previous Volta kernel should work just fine here, but we can make it
 *  nicer by using the `<>` syntax to define variable arrays and `.f16x2` to
 *  constrain the register to packed half-precision pairs.
 */
.visible .entry tops_f16f16_sm90tc_16x16x16_1024loop_ptx_kernel()
{
    // Accumulator registers used for both input and output of the MMA operation
    .reg .b32 accum<4>;

    // Registers to hold packed 16-bit data for matrix A (8 registers)
    .reg .f16x2 matrix_a<8>;

    // Registers to hold packed 16-bit data for matrix B (8 registers)
    .reg .f16x2 matrix_b<8>;

    // General-purpose registers for loop control and constant values
    .reg .b32 loop_counter, loop_limit, packed_const;

    // Predicate register for conditional branching (loop exit)
    .reg .pred exit_predicate;

    // Set up loop counter and loop limit
    mov.u32 loop_counter, 0;
    mov.u32 loop_limit, 1024;

    // Zero-initialize the accumulator registers
    mov.f32 accum0, 0.0;
    mov.f32 accum1, 0.0;
    mov.f32 accum2, 0.0;
    mov.f32 accum3, 0.0;

    // Initialize constant for packed matrix data (placeholder)
    mov.b32 packed_const, 0x00010001;

    // Initialize matrix a registers with the packed constant
    mov.b32 matrix_a0, packed_const;
    mov.b32 matrix_a1, packed_const;
    mov.b32 matrix_a2, packed_const;
    mov.b32 matrix_a3, packed_const;
    mov.b32 matrix_a4, packed_const;
    mov.b32 matrix_a5, packed_const;
    mov.b32 matrix_a6, packed_const;
    mov.b32 matrix_a7, packed_const;

    // Initialize matrix b registers with the packed constant
    mov.b32 matrix_b0, packed_const;
    mov.b32 matrix_b1, packed_const;
    mov.b32 matrix_b2, packed_const;
    mov.b32 matrix_b3, packed_const;
    mov.b32 matrix_b4, packed_const;
    mov.b32 matrix_b5, packed_const;
    mov.b32 matrix_b6, packed_const;
    mov.b32 matrix_b7, packed_const;

    // The main loop will repeat for 1024 iterations
loop_start:
    setp.ge.u32 exit_predicate, loop_counter, loop_limit;
    @exit_predicate bra loop_exit;

    wmma.mma.sync.aligned.row.col.m16n16k16.f16.f16 
         { accum0, accum1, accum2, accum3 },
         { matrix_a0, matrix_a1, matrix_a2, matrix_a3,
           matrix_a4, matrix_a5, matrix_a6, matrix_a7 },
         { matrix_b0, matrix_b1, matrix_b2, matrix_b3,
           matrix_b4, matrix_b5, matrix_b6, matrix_b7 },
         { accum0, accum1, accum2, accum3 };

    // Increment the loop counter
    add.u32 loop_counter, loop_counter, 1;

    // Branch back to the beginning of the loop
    bra loop_start;

loop_exit:
    ret;
}

/**
 *  Each new generation of Tensor Cores supports a wider palette of numeric
 *  types, "structured sparsity" modes, and asynchronous scheduling protocols.
 *
 *  For double-precision numbers, we can go down to a granularity as small as
 *  just 8x8x4 for `sm_80` or higher.
 */

.visible .entry tops_f64f64_sm90tc_8x8x4_1024loop_ptx_kernel()
{
    // Registers to hold matrix A and B operands (each a single f64)
    .reg .f64 matrix_a, matrix_b;

    // Additive bias and accumulator registers used for both input and output of the MMA operation
    .reg .f64 bias<2>, accum<2>;

    // General-purpose registers for loop control
    .reg .b32 loop_counter, loop_limit;

    // Predicate register for conditional branching (loop exit)
    .reg .pred exit_predicate;

    // Set up loop counter and loop limit
    mov.u32 loop_counter, 0;
    mov.u32 loop_limit, 1024;

    // Zero-initialize the accumulator registers
    mov.f64 accum0, 0.0;
    mov.f64 accum1, 0.0;

    // Initialize matrix A and B operands to one (double precision)
    mov.f64 matrix_a, 1.0;
    mov.f64 matrix_b, 1.0;

    // Initialize the additive bias to zero
    mov.f64 bias0, 0.0;
    mov.f64 bias1, 0.0;

    // The main loop will repeat for 1024 iterations
loop_start:
    setp.ge.u32 exit_predicate, loop_counter, loop_limit;
    @exit_predicate bra loop_exit;

    mma.sync.aligned.m8n8k4.row.col.f64.f64.f64.f64
         { accum0, accum1 },
         { matrix_a },
         { matrix_b },
         { bias0, bias1 };

    // Increment the loop counter
    add.u32 loop_counter, loop_counter, 1;

    // Branch back to the beginning of the loop
    bra loop_start;

loop_exit:
    ret;
}

/**
 *  Ridiculously, there are no Warp-Group-Asynchronous double-precision
 *  variants, but every other variant is present:
 *
 *  - `b1` operands wit `s32` accumulators
 *  - `u8` and `s8` operands with `s32` accumulators
 *  - `e4m3` and `e5m2` operands with `f16` and `f32` accumulators
 *  - `f16` operands with `f16` and `f32` accumulators
 *  - `bf16` operands with `f32` accumulators
 *  - `tf32` operands with `f32` accumulators
 *
 *  So the highest-precision properly accelerated type is the `tf32`, which
 *  is confusingly 19 bits wide! The synchronous variant would look familiar:
 */

 .visible .entry tops_tf32tf32_sm90tc_16x16x8_1024loop_ptx_kernel()
{
    // Accumulator registers used for both input and output of the MMA operation
    .reg .b32 accum<8>;

    // Registers to hold packed 16-bit data for matrix A
    .reg .b32 matrix_a<4>;

    // Registers to hold packed 16-bit data for matrix B
    .reg .b32 matrix_b<4>;

    // General-purpose registers for loop control and constant values
    .reg .b32 loop_counter, loop_limit, packed_const;

    // Predicate register for conditional branching (loop exit)
    .reg .pred exit_predicate;

    // Set up loop counter and loop limit
    mov.u32 loop_counter, 0;
    mov.u32 loop_limit, 1024;

    // Zero-initialize the accumulator registers
    mov.f32 accum0, 0.0;
    mov.f32 accum1, 0.0;
    mov.f32 accum2, 0.0;
    mov.f32 accum3, 0.0;
    mov.f32 accum4, 0.0;
    mov.f32 accum5, 0.0;
    mov.f32 accum6, 0.0;
    mov.f32 accum7, 0.0;

    // Initialize constant for packed matrix data (placeholder)
    mov.b32 packed_const, 0x00010001;

    // Initialize matrix a registers with the packed constant
    mov.b32 matrix_a0, packed_const;
    mov.b32 matrix_a1, packed_const;

    // Initialize matrix b registers with the packed constant
    mov.b32 matrix_b0, packed_const;
    mov.b32 matrix_b1, packed_const;

    // The main loop will repeat for 1024 iterations
loop_start:
    setp.ge.u32 exit_predicate, loop_counter, loop_limit;
    @exit_predicate bra loop_exit;

    wmma.mma.sync.aligned.m16n16k8.row.col.f32.tf32.tf32.f32
         { accum0, accum1, accum2, accum3,
           accum4, accum5, accum6, accum7 },
         { matrix_a0, matrix_a1, matrix_a2, matrix_a3 },
         { matrix_b0, matrix_b1, matrix_b2, matrix_b3 },
         { accum0, accum1, accum2, accum3,
           accum4, accum5, accum6, accum7 };

    // Increment the loop counter
    add.u32 loop_counter, loop_counter, 1;

    // Branch back to the beginning of the loop
    bra loop_start;

loop_exit:
    ret;
}

/**
 *  The instruction syntax for Warp-Group asynchronous instructions is very
 *  different, as at least one of the operand matrices has to be in shared
 *  memory (not registers). It's documented as in 2 variants:
 *
 *      wgmma.mma_async.sync.aligned.shape.dtype.tf32.tf32
 *          d, a-desc, b-desc, scale-d, imm-scale-a, imm-scale-b;
 *      wgmma.mma_async.sync.aligned.shape.dtype.tf32.tf32
 *          d, a, b-desc, scale-d, imm-scale-a, imm-scale-b;
 *
 *  There is no "C" matrix involved at all, we are computing `D = A * B + D`.
 *  The A and B matrix descriptors are the properties of the matrix in shared
 *  memory. It is a 64-bit value contained with the following layout:
 *
 *      - 14 bits [0; 13]: start address
 *      - 14 bits [16; 29]: leading dimension byte offset
 *      - 14 bits [32; 45]: stride dimension byte offset
 *      - 3 bits [49; 51]: matrix base offset, valid only for "swizzling"
 *      - 2 bits [62; 63]: "swizzling" mode
 *
 *  Swizzling defines the order of the elements and can have 4 possible values:
 *
 *      0: no "swizzling" at all
 *      1: a 128-byte "swizzle" with a 1024 byte offset of a repeating pattern
 *      2: a 64-byte "swizzle" with a 512 byte offset of a repeating pattern
 *      3: a 32-byte "swizzle" with a 256 byte offset of a repeating pattern
 *
 *  The list of supported shapes is exhausting:
 *
 *      .m64n8k8, .m64n16k8, .m64n24k8, .m64n32k8,
 *      .m64n40k8, .m64n48k8, .m64n56k8, .m64n64k8,
 *      .m64n72k8, .m64n80k8, .m64n88k8, .m64n96k8,
 *      .m64n104k8, .m64n112k8, .m64n120k8, .m64n128k8,
 *      .m64n136k8, .m64n144k8, .m64n152k8, .m64n160k8,
 *      .m64n168k8, .m64n176k8, .m64n184k8, .m64n192k8,
 *      .m64n200k8, .m64n208k8, .m64n216k8, .m64n224k8,
 *      .m64n232k8, .m64n240k8, .m64n248k8, .m64n256k8
 *
 *  The `scale` parameters can be used to either negate the inputs, or disable
 *  additive bias accumulation in the output.
 */
.visible .entry tops_tf32tf32_sm90tc_m64n16k8_1024loop_ptx_kernel()
{
    // Accumulator registers used for both input and output of the asynchronous MMA operation
    .reg .f32 accum<8>;

    // Descriptors for matrix A and matrix B operands
    .reg .b64 desc_a, desc_b;

    // General-purpose registers for loop control
    .reg .b32 loop_counter, loop_limit;

    // Predicate register for conditional branching (loop exit)
    .reg .pred exit_predicate;

    // Set up loop counter and loop limit
    mov.u32 loop_counter, 0;
    mov.u32 loop_limit, 1024;

    // Zero-initialize the accumulator registers
    mov.f32 accum0, 0.0;
    mov.f32 accum1, 0.0;
    mov.f32 accum2, 0.0;
    mov.f32 accum3, 0.0;
    mov.f32 accum4, 0.0;
    mov.f32 accum5, 0.0;
    mov.f32 accum6, 0.0;
    mov.f32 accum7, 0.0;

    // Initialize matrix descriptors with arbitrary placeholder values
    mov.u64 desc_a, 0x0000000000000001;
    mov.u64 desc_b, 0x0000000000000001;

    // The main loop will repeat for 1024 iterations
loop_start:
    setp.ge.u32 exit_predicate, loop_counter, loop_limit;
    @exit_predicate bra loop_exit;

    wgmma.mma_async.sync.aligned.m64n16k8.f32.tf32.tf32
         { accum0, accum1, accum2, accum3, accum4, accum5, accum6, accum7 },
         desc_a,
         desc_b,
         0, -1, -1;

    // Increment the loop counter
    add.u32 loop_counter, loop_counter, 1;

    // Branch back to the beginning of the loop
    bra loop_start;

loop_exit:
    ret;
}

/**
 *  There are also "structured-sparse" variants of those instructions, in case
 *  half of our entries are zeros!
 */